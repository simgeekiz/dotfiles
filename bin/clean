#!/bin/zsh
# ---
# Author: Simge Ekiz
# ---
# Empties the trash on all mounted volumes.
#
# Usage:  clean
# License: MIT
# https://github.com/dikiaap/dotfiles

set -e  # Exit on error

# Since some programs are installed in non-root directories,
# don't run this script as root to avoid permission conflict.
if [[ $EUID -eq 0 ]]; then
    echo "Don't run this script as root"
    exit 1
fi

clean_trash() {
  echo "🗑️ Cleaning system Trash..."
  case "$(uname)" in
    Darwin)
      sudo rm -rf ~/.Trash/*
      sudo rm -rf /Volumes/*/.Trashes/*
      sudo rm -rf /private/var/log/asl/*.asl
      ;;
    Linux)
      sudo rm -rf "$HOME/.local/share/Trash/"* 2>/dev/null || true
      # sudo rm -rf /root/.local/share/Trash/* 2>/dev/null || true
      ;;
    *)
      echo "❌ Unsupported OS: $(uname)"
      echo "❗ Please check if you are running this on a supported OS (Linux or macOS)."
      exit 1
      ;;
  esac
}

clean_package_cache() {
  echo "📦 Detecting package manager..."
  if command -v apt-get >/dev/null 2>&1; then
    echo "🧼 Cleaning APT..."
    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt-get autoremove -y
  elif command -v dnf >/dev/null 2>&1; then
    echo "🧼 Cleaning DNF..."
    sudo dnf autoremove -y
    sudo dnf clean all
  elif command -v yum >/dev/null 2>&1; then
    echo "🧼 Cleaning YUM..."
    sudo yum autoremove -y
    sudo yum clean all
  elif command -v pacman >/dev/null 2>&1; then
    echo "🧼 Cleaning Pacman..."
    sudo pacman -Rns $(pacman -Qtdq) || true
    sudo pacman -Sc --noconfirm
  elif command -v zypper >/dev/null 2>&1; then
    echo "🧼 Cleaning Zypper..."
    sudo zypper clean --all
  elif command -v brew >/dev/null 2>&1; then
    echo "🍺 Cleaning Homebrew..."
    brew cleanup -s
    brew autoremove
  else
    echo "❌ No supported package manager found."
  fi
}

local script_name="${0##*/}"
# Print usage message.
usage() {
  cat <<EOF
    Usage: $script_name [OPTIONS]

    Options:
      --help, -h       Show this help message
      --trash, -t      Clean system Trash (Linux/macOS)
      --packages, -p   Auto-clean package manager cache
EOF
}

# === Parse arguments ===
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --help | -h | -help)
      usage
      exit 0
      ;;
    --trash | -t | -trash)
      clean_trash
      ;;
    --packages|-p)
      clean_package_cache
      ;;
    *)
      echo "❌ Unknown option: $1"
      usage
      exit 1
      ;;
  esac
  shift
done


